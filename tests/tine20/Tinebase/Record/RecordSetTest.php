<?php
/**
 * Tine 2.0
 * 
 * @package     Tinebase
 * @subpackage  Record
 * @license     http://www.gnu.org/licenses/agpl.html
 * @copyright   Copyright (c) 2007-2007 Metaways Infosystems GmbH (http://www.metaways.de)
 * @author      Cornelius Weiss <c.weiss@metaways.de>
 * @version     $Id$
 */
/**
 * Test helper
 */
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
// Call Tine20_Tinebase_Record_RecordSetTest::main() if this source file is executed directly.
if (! defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Tine20_Tinebase_Record_RecordSetTest::main');
}
/**
 * Test class for Tinebase_Record_RecordSet.
 * Generated by PHPUnit on 2008-02-15 at 09:37:50.
 */
class Tine20_Tinebase_Record_RecordSetTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Tinebase_Record_RecordSet
     */
    protected $object;
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main ()
    {
        $suite = new PHPUnit_Framework_TestSuite('Tine20_Tinebase_Record_RecordSetTest');
        PHPUnit_TextUI_TestRunner::run($suite);
    }
    /**
     * Sets up the fixture.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp ()
    {
        $this->object = new Tinebase_Record_RecordSet('Tinebase_Record_DummyRecord');
        $this->object->addRecord(new Tinebase_Record_DummyRecord(array(), true));
    }
    /**
     * Tears down the fixture.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown ()
    {}
    /**
     * Tests exception if wrong record type given in the initial data array
     */
    public function testConstructorWrongRecord ()
    {
        $this->setExpectedException('Tinebase_Record_Exception_NotAllowed');
        try {
            $recordArray[] = new Tinebase_Record_DummyRecord(array(), true);
            $recordArray[] = new Tinebase_Model_Container(array(), true);
            $this->object = new Tinebase_Record_RecordSet('Tinebase_Record_DummyRecord', $recordArray);
        } catch (InvalidArgumentException $expected) {
            return;
        }
        $this->fail('An expected exception has not been raised.');
    }
    /**
     * test addidtion of a record
     */
    public function testAddRecord ()
    {
        $record = new Tinebase_Record_DummyRecord(array(), true);
        $index = $this->object->addRecord($record);
        $this->assertEquals($record, $this->object[$index]);
    }
    /**
     * test if exception is thrown when adding record of wrong type
     *
     */
    public function testAddWrongRecordException ()
    {
        $this->setExpectedException('Tinebase_Record_Exception_NotAllowed');
        try {
            $record = new Tinebase_Model_Container(array(), true);
            $this->object->addRecord($record);
        } catch (InvalidArgumentException $expected) {
            return;
        }
        $this->fail('An expected exception has not been raised.');
    }
    /**
     * checkes if isValid of of member records is called
     */
    public function testIsValid ()
    {
        $record = new Tinebase_Record_DummyRecord(array('id' => 'shouldBeInt'), true);
        $record->bypassFilters = false;
        $this->object->addRecord($record);
        $this->assertFalse($this->object->isValid());
    }
    /**
     * test implementation of IteratorAggregate
     */
    public function testIteratorAggregate ()
    {
        $gotIterator = false;
        foreach ($this->object as $record) {
            $gotIterator = true;
            $this->assertTrue($record instanceof Tinebase_Record_DummyRecord);
        }
        $this->assertTrue($gotIterator);
    }
    /**
     * test toArray() implementation
     */
    public function testToArray ()
    {
        $resultArray = $this->object->toArray();
        for ($i=0; $i < count($this->object); $i++) {
            $this->assertEquals($this->object[$i]->toArray(), $resultArray[$i]);
        }
    }
    /**
     * test__set().
     */
    public function test__set ()
    {
        $id = rand(1,100);
        $this->object->id = $id;
        foreach ($this->object as $record) {
            $this->assertEquals($id, $record->id);
        }
    }
    /**
     * test__call().
     */
    public function test__call ()
    {
        $now = Zend_Date::now();
        $now->setTimezone('Europe/Berlin');
        
        $this->object->date_single = clone ($now);
        $this->object->setTimezone('America/Los_Angeles');
        foreach ($this->object as $record) {
        	$this->assertNotEquals($record->date_single->getIso(), $now->getIso());
        }
        
    }
    /**
     * testCount().
     */
    public function testCount ()
    {
        $before = $this->object->count();
        $record = new Tinebase_Record_DummyRecord(array(), true);
        $this->object->addRecord($record);
        $this->assertEquals($this->object->count(), ($before + 1));
    }
    /**
     * testOffsetExists().
     */
    public function testOffsetExists ()
    {
        $count = count($this->object);
        $this->assertFalse(isset($this->object[$count]));
        $record = new Tinebase_Record_DummyRecord(array(), true);
        $this->object->addRecord($record);
        $this->assertTrue(isset($this->object[$count]));
    }
    /**
     * testOffsetGet().
     */
    public function testOffsetGet ()
    {
        $record = new Tinebase_Record_DummyRecord(array(), true);
        $index = $this->object->addRecord($record);
        $this->assertEquals($record, $this->object[$index]);
    }
    /**
     * testOffsetSet().
     */
    public function testOffsetSet ()
    {
        $count = count($this->object);
        $record = new Tinebase_Record_DummyRecord(array(), true);
        $this->object[$count] = $record;
        $this->assertEquals($count+1, count($this->object));
    }
    /**
     * testOffsetUnset().
     */
    public function testOffsetUnset ()
    {
        $count = count($this->object);
        unset($this->object[$count-1]);
        $this->assertEquals($count-1, count($this->object));
    }
}
// Call Tinebase_Record_RecordSetTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Tine20_Tinebase_Record_RecordSetTest::main') {
    Tine20_Tinebase_Record_RecordSetTest::main();
}
?>
