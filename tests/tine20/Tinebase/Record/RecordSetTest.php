<?php
// Call Egwbase_Record_RecordSetTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Tine20_Egwbase_Record_RecordSetTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once 'C:\xampp\htdocs\tine20\trunk\tine20\Egwbase\Record\RecordSet.php';

/**
 * Test class for Egwbase_Record_RecordSet.
 * Generated by PHPUnit on 2008-02-15 at 09:37:50.
 */
class Tine20_Egwbase_Record_RecordSetTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Egwbase_Record_RecordSet
     * @access protected
     */
    protected $object;
	protected $object_alter;
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Tine20_AllTests');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
    	$recordArray = array();
    	for ($i = 0; $i < 10; $i++) {
    	//	$recordArray[] = new Egwbase_Record_DummyRecord(array(), NULL);
    	}
    	$recordArray[] = $recordArray ; 
    	$this->object = new Egwbase_Record_RecordSet($recordArray, 'Egwbase_Record_DummyRecord');
        $this->object_alter = new Egwbase_Record_RecordSet(array(array('test_id'=>'2', 'test_2'=>NULL, )), 'Egwbase_Record_DummyRecord', NULL);
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    public function testConstructorException() {
    	$this->setExpectedException('Egwbase_Record_Exception_NotAllowed');
		try {
			$recordArray[] = new Egwbase_Record_DummyRecord(array(), NULL);
    		$recordArray[] = new Egwbase_Record_Container(array(), NULL);
    		$this->object = new Egwbase_Record_RecordSet($recordArray, 'Egwbase_Record_DummyRecord');
        
		}
		catch (InvalidArgumentException $expected) {
	        return;
		}
		$this->fail('An expected exception has not been raised.');
    	
    }
   
    
    
    
    /**
     * @todo Implement testAddRecord().
     */
    public function testAddRecord() {
    	
    	$before = $this->object->count();
		$record = new Egwbase_Record_DummyRecord(array(), NULL);
    	$this->object->addRecord($record);
    	$this->assertEquals($this->object->count(), ($before +  1));
    }

    public function testAddRecordException() {
    	$this->setExpectedException('Egwbase_Record_Exception_NotAllowed');
		try {
			$record = new Egwbase_Record_Container(array(), NULL);
    		$this->object->addRecord($record);
		}
		catch (InvalidArgumentException $expected) {
	        return;
		}
		$this->fail('An expected exception has not been raised.');
    	
    }
   
    
    
    /**
     * @covers isValid
     */
    public function testIsValid() {
		$this->assertTrue($this->object->isValid());
    }

    
	public function testArrayIterator(){
		foreach($this->object as $key => $val ) {
			if (isset($this->object[$key])) { 
				$this->object[$key] = $this->object[$key];
			}
		}
	}  
    
    
    
    /**
     * @todo Implement testGetValidationErrors().
     */
    public function testGetValidationErrors() {
        $this->assertEquals($this->object->getValidationErrors(), array());
    }

    /**
     * @todo Implement testToArray().
     */
    public function testToArray() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__set().
     */
    public function test__set() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__call().
     */
    public function test__call() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCount().
     */
    public function testCount() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetIterator().
     */
    public function testGetIterator() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOffsetExists().
     */
    public function testOffsetExists() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOffsetGet().
     */
    public function testOffsetGet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOffsetSet().
     */
    public function testOffsetSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOffsetUnset().
     */
    public function testOffsetUnset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}

// Call Egwbase_Record_RecordSetTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Tine20_Egwbase_Record_RecordSetTest::main') {
    Egwbase_Record_RecordSetTest::main();
}
?>
