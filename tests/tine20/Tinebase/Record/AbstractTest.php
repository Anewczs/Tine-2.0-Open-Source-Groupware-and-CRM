<?php
/**
 * Tine 2.0
 * 
 * @package     tests
 * @subpackage  tinebase
 * @license     http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * @copyright   Copyright (c) 2007-2008 Metaways Infosystems GmbH (http://www.metaways.de)
 * @author      Matthias Greiling <m.greiling@metaways.de>
 * @version     $$
 */

/**
 * Test class for Tinebase_Record
 * Generated by PHPUnit on 2008-02-08 at 13:37:01.
 */
abstract class Tine20_Tinebase_Record_AbstractTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    test objects
     * @access protected
     */
    protected $objects = array('TestRecord');
    protected $expectFailure = array();
    protected $expectSuccess = array();
    

    
    /**
     * Sets up the fixture, for example
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
		
	}

    /**
     * Tears down the fixture
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
	
    }

	/**
	 * Tests if exception is raised when extending class is broken
	 */
	public function testConstructorException() {
		$this->setExpectedException('Exception');
	    try {
            $this->objects['TestRecordBroken'] = new Tinebase_Record_DummyRecordBroken();
        }
        catch (InvalidArgumentException $expected) {
            return;
        }
        $this->fail('An expected exception has not been raised.');
    }
    
	/**
	 * @covers Tinebase_Record_Abstract::setId
	 */
    public function testSetId() {
    	
    	if (isset($this->expectFailure['TestRecord']['testSetId'])) {
			foreach ($this->expectFailure['TestRecord']['testSetId'] as $pair) {
		    	$this->objects['TestRecord']->setId($pair[0]);
				$this->assertNotEquals($this->objects['TestRecord']->getId(), $pair[1]) ;
			}
    	} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}
	
    	if (isset($this->expectSuccess['TestRecord']['testSetId'])) {
			foreach ($this->expectSuccess['TestRecord']['testSetId'] as $pair) {
		    	$this->objects['TestRecord']->setId($pair[0]);
				$this->assertEquals($this->objects['TestRecord']->getId(), $pair[1]) ;
			}
    	} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}
    }

	public function testSetIdBypassFilters() {
		
		if(isset($this->objects['TestRecordBypassFilters'])) {
			$this->objects['TestRecordBypassFilters']->setId('8');
			$this->assertEquals($this->objects['TestRecordBypassFilters']->getId(), '8') ; 
		} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}
	}

    /**
     * @covers Tinebase_Record_Abstract::getId()
     */
	public function testGetId() {
		foreach ($this->objects as $record ) {
			$this->assertNotNull($record->getId());
		}
	}
   
	/**
	 * @covers Tinebase_Record_Abstract::offsetExists
	 * @covers Tinebase_Record_Abstract::offsetGet
	 * @covers Tinebase_Record_Abstract::getIterator
	 *
	 */
	public function testArrayIterator(){
		foreach($this->objects['TestRecord'] as $key => $val ) {
			if (isset($this->objects['TestRecord'][$key])) { 
				$this->objects['TestRecord'][$key] = $this->objects['TestRecord'][$key];
			}
		}
	}
	
	/**
     * @covers Tinebase_Record_Abstract::setFromArray
     */   
    public function testSetFromArray() {
	    if (isset($this->expectSuccess['TestRecord']['testSetFromArray'])) {	
    		foreach ($this->expectSuccess['TestRecord']['testSetFromArray'] as $pair) {
		       	$this->objects['TestRecord']->setFromArray($pair[0], NULL);
			 	$this->assertTrue($this->objects['TestRecord']->__isset($pair[1]));
	    	}
	    } else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}	
    }
	
    public function testSetFromArrayWithFilterSet() {
    	if (isset($this->expectSuccess['TestRecord']['testSetFromArray'])) {
	        foreach ($this->expectSuccess['TestRecord']['testSetFromArray'] as $pair) {
		       	$this->objects['TestRecord']->setFromArray($pair[0], true);
			 	$this->assertTrue($this->objects['TestRecord']->__isset($pair[1]));
	        }
	    } else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}
    }

    public function testSetFromArrayException() {
    	if (isset($this->expectSuccess['TestRecord']['testSetFromArrayException'])) {
	    
    		 foreach ($this->expectFailure['TestRecord']['testSetFromArrayException'] as $pair) {
    			$this->setExpectedException($pair[0]);
			    try {
					$this->objects['TestRecord']->setFromArray($pair[1], NULL);
			    }
		 	    catch (InvalidArgumentException $expected) {
		            return;
		        }
		      	  $this->fail('An expected exception has not been raised.');
    		 } 	  
    	 } else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}	
    }
 
    public function testSetTimezone() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
	
    public function testSetTimezoneException() {
		if(isset($this->expectFailure['TestRecord']['testSetTimezoneException'])) {
    		foreach ($this->expectFailure['TestRecord']['testSetTimezoneException'] as $pair) {
				
				$this->setExpectedException($pair[0]);
			    try {
					$this->objects['TestRecord']->setTimezone($pair[1]);
				}
				catch (InvalidArgumentException $expected) {
		            return;
		        }
				$this->fail('An expected exception has not been raised.');
	    	}
		} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}	
    }

	public function testGetValidationErrors() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
	}
	
	public function testGetValidationErrorsBypassFilters() {
		//if(isset($this->objects['TestRecordBypassFilters'])) {
        
		// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
	}	
		
	public function testToArray() 	{
		if(isset($this->expectSuccess['TestRecord']['testToArray'])) {	
			foreach ($this->expectSuccess['TestRecord']['testToArray'] as $pair) {   
			   $this->assertEquals($this->objects['TestRecord']->toArray(), $pair[0]);
			}  
		} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}		
	}
		
	public function testIsValid() {
		//foreach ($this->objects as $record ) {
		//	if (!$record->isValid()) {
				//echo "Error in " . $record->getId() ;
		//	}
		//	$this->assertTrue($record->isValid());
		//}
		$this->markTestIncomplete('This test has not been implemented yet.');
	}
	
	public function test__set() {
		if(isset($this->expectSuccess['TestRecord']['__set'])) {		
		 	foreach ($this->expectSuccess['TestRecord']['__set'] as $pair) { 
				$this->objects['TestRecord']->__set($pair[0], $pair[1]);
				$this->assertEquals($this->objects['TestRecord']->offsetGet($pair[0]), $pair[1]) ;
			
				if(isset($this->objects['TestRecordBypassFilters'])) {
					$this->objects['TestRecordBypassFilters']->__set($pair[0], $pair[1]);
					$this->assertEquals($this->objects['TestRecordBypassFilters']->offsetGet($pair[0]), $pair[1]) ;
	
				}
		 	}	
	 	} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}
	}
	
	public function test__isset() {
		if (isset($this->expectSuccess['TestRecord']['test__isset'])) {	
			foreach ($this->expectSuccess['TestRecord']['test__isset'] as $pair) { 
				$this->assertTrue($this->objects['TestRecord']->__isset($pair[0]));
			}
		} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}	

		if (isset($this->expectFailure['TestRecord']['test__isset'])) {	
			foreach ($this->expectFailure['TestRecord']['test__isset'] as $pair) { 
				$this->assertFalse($this->objects['TestRecord']->__isset($pair[0]));
			}
		} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}	
		
	}
	
	public function test__get() {
		if (isset($this->expectSuccess['TestRecord']['__get'])) {
			foreach ($this->expectSuccess['TestRecord']['__get'] as $pair) { 
				$this->objects['TestRecord']->__set($pair[0], $pair[1]);
				$this->assertEquals($this->objects['TestRecord']->__get($pair[0]), $pair[1]) ;
		 	}
		} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}
	}
	
	public function test__setException() {
		if (isset($this->expectFailure['TestRecord']['test__setException'])) {	
			foreach ($this->expectFailure['TestRecord']['test__setException'] as $pair) {
				$this->setExpectedException($pair[0]);
			    try {
		            $this->objects['TestRecord']->__set($pair[1], NULL);
		        }
		 
		        catch (InvalidArgumentException $expected) {
		            return;
		        }
		 
		        $this->fail('An expected exception has not been raised.');
	       }
		} else {
    		$this->markTestIncomplete('This test has not been implemented yet.');
    	}
	}
		
	/**
	 * @covers Tinebase_Abstract_Record::__get
	 */	
	public function test__getException() {
		if (isset($this->expectFailure['TestRecord']['test__getException'])) {
			foreach ($this->expectFailure['TestRecord']['test__getException'] as $pair) {
				$this->setExpectedException($pair[0]);
			    try {
		            $this->objects['TestRecord']->__get($pair[1]);
		        }
		 
		        catch (InvalidArgumentException $expected) {
		            return;
		        }
		 
		        $this->fail('An expected exception has not been raised.');
	       }
		} else {
			$this->markTestIncomplete('This test has not been implemented yet.');	
		}   
	}
	
	public function testOffsetUnset() {
		if (isset($this->expectFailure['TestRecord']['testSetTimezoneException'])) {	
			foreach ($this->expectFailure['TestRecord']['testSetTimezoneException'] as $pair) {
				$this->setExpectedException($pair[0]);
			    try {
		            $this->objects['TestRecord']->offsetUnset($pair[1]);
		        }
		 
		        catch (InvalidArgumentException $expected) {
		            return;
		        }
		 
		        $this->fail('An expected exception has not been raised.');
		    }
		} else {
			$this->markTestIncomplete('This test has not been implemented yet.');	
		}    
	}

}		
	